# pyproject.toml - Poetry configuration
[tool.poetry]
name = "area-boundary-converter"
version = "0.1.0"
description = "Speckle Automate function to convert Revit Area boundaries to surfaces"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
specklepy = "^2.21.4"

[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
mypy = "^1.3.0"
ruff = "^0.0.271"
pydantic-settings = "^2.3.0"
pytest = "^7.4.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "UP", # pyupgrade
    "D",  # pydocstyle
    "I",  # isort
]

[tool.ruff.pydocstyle]
convention = "google"

# ---

# Dockerfile
FROM python:3.11-slim

# We install poetry to generate a list of dependencies which will be required by our application
RUN pip install poetry==1.8.4

# We set the working directory to be the /home/speckle directory; all of our files will be copied here.
WORKDIR /home/speckle

# Copy all of our code and assets from the local directory into the /home/speckle directory of the container.
# We also ensure that the user 'speckle' owns these files, so it can access them
# This assumes that the Dockerfile is in the same directory as the rest of the code
COPY . /home/speckle

# Using poetry, we generate a list of requirements, save them to requirements.txt, and then use pip to install them
RUN poetry export --format requirements.txt --output /home/speckle/requirements.txt && pip install --requirement /home/speckle/requirements.txt

# ---

# .github/workflows/main.yml - GitHub Actions workflow
name: Build and Deploy Function

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.4

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run pytest

      - name: Run linting
        run: |
          poetry run black --check .
          poetry run ruff check .

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Register version with Speckle Automate
        env:
          SPECKLE_AUTOMATE_FUNCTION_ID: ${{ secrets.SPECKLE_AUTOMATE_FUNCTION_ID }}
          SPECKLE_AUTOMATE_FUNCTION_PUBLISH_TOKEN: ${{ secrets.SPECKLE_AUTOMATE_FUNCTION_PUBLISH_TOKEN }}
        run: |
          echo "Function version registered with Speckle Automate"
          echo "Release: ${{ github.ref_name }}"
          echo "Image: ${{ steps.meta.outputs.tags }}"